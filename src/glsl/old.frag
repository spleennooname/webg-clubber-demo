l_Position = vec4(position.xy,1.0, 1.0 );\r\n}"},function(e,t){e.exports="// by Andrea Bovo, spleennooname / 2016\r\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 vUv;\r\n\r\nuniform float iGlobalTime;\r\nuniform vec2 iResolution;\r\n\r\nuniform vec4 iMusicSub;\r\nuniform vec4 iMusicLow;\r\nuniform vec4 iMusicMid;\r\nuniform vec4 iMusicHigh;\r\n\r\n#define time iGlobalTime\r\n#define R iResolution.xy\r\n\r\n#define N_WAVES 6.0\r\n#define GREY 220. / 255.\r\n\r\n// noise\r\nfloat rand(float n) { return fract(sin(n) * 43758.5453123); }\r\n\r\nfloat noise(float p) {\r\n  float fl = floor(p);\r\n  float fc = fract(p);\r\n  return mix(rand(fl), rand(fl + 1.0), fc);\r\n}\r\n\r\nfloat gauss(float s, float x) { return (0.85) * exp(-x * x / (2. * s * s)); }\r\n\r\nfloat blur(float dist, float width, float blur, float intens) {\r\n  dist = max(abs(dist) - width, 0.);\r\n  float b = gauss(0.02 + width * 10. * blur, dist);\r\n  return b * intens;\r\n}\r\n\r\nfloat d2y2(float d, float i) {\r\n  float b = 0.75 * i + 0.0001;\r\n  return blur(d, 0.005, b, 0.45);\r\n}\r\n\r\nfloat f(float x) { return blur(0.5 * x, 0.03, 0.04 + 0.5, 1.); }\r\n\r\nfloat wave(float x,float i, vec4 sub, vec4 low, vec4 mid, vec4 high) {\r\n\r\n  // 0 the note where the highest energy was seen,\r\n  // 1 the average note for the whole band,\r\n  // 2 the octave (bass vs treble) and\r\n  // 3 the average energy of all triggered notes.\r\n\r\n\r\n  float y = (mix(0., +.75, high[1] * .75 + high[0] + mid[0]) - .25 * i) * sin(x * 1.45 + .55 * time - i* mix(-.5, +.5, sub[1] + mid[0] + low[0] + high[3]));\r\n\r\n  return y;\r\n}\r\n\r\nvoid main() {\r\n\r\n  vec2 uv = (gl_FragCoord.xy / R.xy - vec2(0.5)) * vec2(R.x / R.y, 1.0);\r\n\r\n  uv.y *= 1.5;\r\n  uv.x *= 1.75;\r\n\r\n  vec3 col = vec3(0.);\r\n\r\n  for (float i = 0.; i < N_WAVES; i+=1.0) {\r\n    float i_f = i * 0.5 + 1.;\r\n    float y = d2y2( distance(2. * uv.y, wave(uv.x, i, iMusicSub, iMusicLow, iMusicMid, iMusicHigh) ), i_f );\r\n    col += y;\r\n  }\r\n\r\n  gl_FragColor = vec4(GREY - col, 1.0);\r\n}\r\n"},function(e,t){e.exports="\nprecision highp float;\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform vec2 uResolution;\n\n#define R uResolution\n#define time uTime\nfloat v = 0.01;\nfloat r = 0.5;\n\nvoid main() {\n\n  vec2 uv = gl_FragCoord.xy / R.xy;\n  /* vec4 sum = vec4(0.0);\n  float vv = v * abs(r - uv.y);\n\n  sum += texture2D(uTexture, vec2(uv.x, uv.y - 4.0 * vv)) * 0.051;\n  sum += texture2D(uTexture, vec2(uv.x, uv.y - 3.0 * vv)) * 0.0918;\n  sum += texture2D(uTexture, vec2(uv.x, uv.y - 2.0 * vv)) * 0.12245;\n  sum += texture2D(uTexture, vec2(uv.x, uv.y - 1.0 * vv)) * 0.1531;\n  sum += texture2D(uTexture, vec2(uv.x, uv.y)) * 0.1633;\n  sum += texture2D(uTexture, vec2(uv.x, uv.y + 1.0 * vv)) * 0.1531;\n  sum += texture2D(uTexture, vec2(uv.x, uv.y + 2.0 * vv)) * 0.12245;\n  sum += texture2D(uTexture, vec2(uv.x, uv.y + 3.0 * vv)) * 0.0918;\n  sum += texture2D(uTexture, vec2(uv.x, uv.y + 4.0 * vv)) * 0.051; */\n\n  gl_FragColor =  texture2D(uTexture, uv);\n}\n